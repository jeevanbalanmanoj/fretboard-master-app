{"version":3,"sources":["images/guitar.png","components/layouts/Header.js","components/pages/Note.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","guitarStyle","paddingTop","headerStyle","background","color","textAlign","padding","Header","style","className","src","guitarImage","width","Note","state","note","stringNo","setInterval","setState","naturalNotes","randomInteger","clearInterval","this","interval","noteStyle","Component","min","max","randomNumber","Math","floor","random","console","log","fontSize","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,oC,6KCe3C,IAIMC,EAAc,CAClBC,WAAY,QAERC,EAAc,CAClBC,WAAY,OACZC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGIC,EA1Bf,WACE,OACE,4BAAQC,MAAON,GACb,+CACmB,IACjB,yBAAKO,UAAU,eACb,yBAAKD,MAAOR,EAAaU,IAAKC,IAAaC,MAAM,c,4BCP9CC,EAAb,4MACEC,MAAQ,CACNC,KAAM,IACNC,SAAU,GAHd,kEAKuB,IAAD,OAClBC,aACE,kBACE,EAAKC,SAAS,CACZH,KAsBDI,EAAaC,EAAc,EAAG,IArB7BJ,SAAUI,EAAc,EAAG,OAE/B,OAZN,6CAgBIC,cAAcC,KAAKC,YAhBvB,+BAmBI,OACE,6BACE,yBAAKf,MAAOgB,GACTF,KAAKR,MAAME,SACXM,KAAKR,MAAMC,WAvBtB,GAA0BU,aA6BpBN,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAIpD,SAASC,EAAcM,EAAKC,GAC1B,IAAMC,EAAeC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,IAAMA,EAEnE,OADAM,QAAQC,IAAIL,GACLA,EAET,IAAMJ,EAAY,CAChBpB,MAAO,QACP8B,SAAU,QACV7B,UAAW,SACXC,QAAS,QAGIO,I,MC/BAsB,MAXf,WACE,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.1836b265.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/guitar.20eb6787.png\";","import React from \"react\";\r\nimport guitarImage from \"../../images/guitar.png\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>\r\n        Fretboard master{\" \"}\r\n        <div className=\"guitarImage\">\r\n          <img style={guitarStyle} src={guitarImage} width=\"100px\" />\r\n        </div>\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\nconst linkStyle = {\r\n  color: \"#fff\",\r\n  textDecoration: \"none\",\r\n};\r\nconst guitarStyle = {\r\n  paddingTop: \"20px\",\r\n};\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Note extends Component {\r\n  state = {\r\n    note: \"C\",\r\n    stringNo: 1,\r\n  };\r\n  componentDidMount() {\r\n    setInterval(\r\n      () =>\r\n        this.setState({\r\n          note: getRandomNaturalNote(),\r\n          stringNo: randomInteger(1, 6),\r\n        }),\r\n      5000\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={noteStyle}>\r\n          {this.state.stringNo}\r\n          {this.state.note}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst naturalNotes = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nfunction getRandomNaturalNote() {\r\n  return naturalNotes[randomInteger(0, 6)];\r\n}\r\nfunction randomInteger(min, max) {\r\n  const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n  console.log(randomNumber);\r\n  return randomNumber;\r\n}\r\nconst noteStyle = {\r\n  color: \"black\",\r\n  fontSize: \"300px\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\nimport Header from \"./components/layouts/Header.js\";\nimport Note from \"./components/pages/Note.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Note />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}